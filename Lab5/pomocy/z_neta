#include "msp430.h"

#define TXLED BIT0
#define RXLED BIT6
#define TXD BIT2
#define RXD BIT1

const char string[] = { "Hello World\r\n" };
unsigned int i; //Counter

int main(void)
{
   WDTCTL = WDTPW + WDTHOLD; // Stop WDT
   DCOCTL = 0; // Select lowest DCOx and MODx settings
   //BCSCTL1 = CALBC1_1MHZ; // Set DCO
  // DCOCTL = CALDCO_1MHZ;

//   P2DIR |= 0xFF; // All P2.x outputs
//   P2OUT &= 0x00; // All P2.x reset

   P1SEL |= RXD + TXD ; // P1.1 = RXD, P1.2=TXD

   P2DIR |= RXLED + TXLED; //
   P2OUT &= 0x00;


   U1TCTL |= SSEL1 + ~SSEL0; // SMCLK
   U0BR0 = 0x08; // 1MHz 115200
   U0BR1 = 0x00; // 1MHz 115200
   U0MCTL = 0x05; // Modulation UCBRSx = 5
   U0CTL &= ~SWRST; // **Initialize USCI state machine**
   IE1 |= URXIE0; // Enable USCI_A0 RX interrupt

   __bis_SR_register(CPUOFF + GIE); // Enter LPM0 w/ int until Byte RXed
   while (1)
   { }
}

#pragma vector=USCIAB0TX_VECTOR
__interrupt void USCI0TX_ISR(void)
{
   P1OUT |= TXLED;
   U1RXBUF = string[i++]; // TX next character
    if (i == sizeof string - 1) // TX over?
    IE1 &= ~UTXIE0;  // Disable USCI_A0 TX interrupt

    P1OUT &= ~TXLED; }

#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
{
   P1OUT |= RXLED;
    if (U1RXBUF == 'a') // 'a' received?
    {
       i = 0;
       IE1 |= UTXIE0; // Enable USCI_A0 TX interrupt
       U1TXBUF = string[i++];
    }
    P1OUT &= ~RXLED;
}
